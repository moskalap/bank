// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `bank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package bank.gen.ice.Bank;

public class Date implements java.lang.Cloneable,
                             java.io.Serializable
{
    public byte day;

    public byte month;

    public short year;

    public Date()
    {
    }

    public Date(byte day, byte month, short year)
    {
        this.day = day;
        this.month = month;
        this.year = year;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Date r = null;
        if(rhs instanceof Date)
        {
            r = (Date)rhs;
        }

        if(r != null)
        {
            if(this.day != r.day)
            {
                return false;
            }
            if(this.month != r.month)
            {
                return false;
            }
            if(this.year != r.year)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Bank::Date");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, day);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, month);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, year);
        return h_;
    }

    public Date clone()
    {
        Date c = null;
        try
        {
            c = (Date)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeByte(this.day);
        ostr.writeByte(this.month);
        ostr.writeShort(this.year);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.day = istr.readByte();
        this.month = istr.readByte();
        this.year = istr.readShort();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Date v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Date ice_read(com.zeroc.Ice.InputStream istr)
    {
        Date v = new Date();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Date> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Date v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            ostr.writeSize(4);
            ice_write(ostr, v);
        }
    }

    static public java.util.Optional<Date> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            istr.skipSize();
            return java.util.Optional.of(Date.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Date _nullMarshalValue = new Date();

    public static final long serialVersionUID = 465658215978744157L;
}
